To convert a Roman numeral to an integer, we can follow these steps using the provided rules about Roman numeral symbols and their values.

### Solution Approach

1. **Define Symbol Values**: Use a dictionary to map each Roman numeral symbol to its integer value.

2. **Process the String from Left to Right**:
   - For each character, check if it should be added or subtracted:
     - If a character has a value less than the next character (e.g., `I` before `V` or `X`), it indicates a subtractive case. Subtract this character's value.
     - Otherwise, add the character's value.

3. **Return the Total**: After processing all characters in the string, we get the integer representation of the Roman numeral.

### Solution Code

```python
class Solution:
    def romanToInt(self, s: str) -> int:
        # Define Roman numeral values in a dictionary.
        roman_values = {
            'I': 1, 'V': 5, 'X': 10, 'L': 50,
            'C': 100, 'D': 500, 'M': 1000
        }
        
        total = 0  # Initialize total to accumulate the result.
        prev_value = 0  # To keep track of the previous value for subtractive cases.
        
        # Process each character from right to left.
        for char in reversed(s):
            value = roman_values[char]
            
            # If the current value is less than the previous one, we are in a subtractive case.
            if value < prev_value:
                total -= value
            else:
                total += value
            
            # Update prev_value for the next iteration.
            prev_value = value
        
        return total
```

### Explanation

1. **Initialize Total and Previous Value**:
   - We start with `total = 0` to accumulate the result.
   - `prev_value = 0` helps us handle the subtractive cases as we move through each character.

2. **Reverse Traversal**:
   - By iterating from right to left, we can easily decide if a character should be subtracted or added based on the value of the previous character.
   
3. **Subtractive Case**:
   - If the current symbol's value is less than the `prev_value`, it indicates a subtractive case, so we subtract this value from `total`.
   - Otherwise, we add the current value to `total`.
   
4. **Update `prev_value`**:
   - After each character, update `prev_value` to the current character's value to handle the next iteration.

5. **Return Result**:
   - After processing all characters, `total` contains the integer representation of the Roman numeral.

### Complexity

- **Time Complexity**: \(O(n)\), where \(n\) is the length of the input string. We process each character once.
- **Space Complexity**: \(O(1)\), since we use a fixed dictionary and a few extra variables.

### Example Walkthrough

#### Example 1: `s = "III"`

1. Process each `I` from right to left: \(1 + 1 + 1 = 3\).
2. Result = `3`.

#### Example 2: `s = "LVIII"`

1. `I + I + I = 3`
2. `V = 5`, add it: \(5 + 3 = 8\).
3. `L = 50`, add it: \(50 + 8 = 58\).
4. Result = `58`.

#### Example 3: `s = "MCMXCIV"`

1. `V = 5`, `I` before `V`, so subtract \(4\) to make `4`.
2. `XC = 90`, `C` before `D`, subtract for `900`.
3. `Total = 1994`.

This solution handles all cases within the constraints efficiently and accurately.
