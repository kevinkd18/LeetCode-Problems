To determine if an integer is a palindrome without converting it to a string, we can reverse half of the number and compare it with the other half. This approach is efficient and avoids the use of extra space for a string conversion.

### Approach

1. **Handle Negative Numbers**:
   - Any negative number is not a palindrome because of the `-` sign. So, return `False` immediately for negative numbers.

2. **Handle Numbers Ending with 0**:
   - If the number ends with `0` but is not `0` itself, it cannot be a palindrome (e.g., `10`, `120`).

3. **Reverse Half of the Digits**:
   - We reverse the second half of the number and compare it to the first half. If they are equal, the number is a palindrome.
   - To do this, we divide the number by 10 to reverse it digit by digit until the original part is less than or equal to the reversed part.

4. **Compare Halves**:
   - If `x` equals `reversed_half`, then the number is a palindrome.
   - For odd-length numbers, we can ignore the middle digit by dividing `reversed_half` by 10.

### Code Implementation

```python
class Solution:
    def isPalindrome(self, x: int) -> bool:
        # Step 1: Handle edge cases
        if x < 0 or (x % 10 == 0 and x != 0):
            return False
        
        # Step 2: Reverse half of the number
        reversed_half = 0
        while x > reversed_half:
            reversed_half = reversed_half * 10 + x % 10
            x //= 10

        # Step 3: Check if the number is a palindrome
        return x == reversed_half or x == reversed_half // 10
```

### Explanation of Code

1. **Edge Cases**:
   ```python
   if x < 0 or (x % 10 == 0 and x != 0):
       return False
   ```
   - Negative numbers and numbers ending with `0` (except `0` itself) are not palindromes.

2. **Reverse Half of the Number**:
   ```python
   reversed_half = 0
   while x > reversed_half:
       reversed_half = reversed_half * 10 + x % 10
       x //= 10
   ```
   - This loop extracts the last digit of `x` and appends it to `reversed_half`. We keep doing this until `reversed_half` is at least as large as `x`.

3. **Compare Halves**:
   ```python
   return x == reversed_half or x == reversed_half // 10
   ```
   - For even-length numbers, `x` should equal `reversed_half`.
   - For odd-length numbers, the middle digit can be ignored by dividing `reversed_half` by `10`.

### Example Walkthrough

- **Example 1**: `x = 121`
  - `x` becomes `12`, and `reversed_half` becomes `12`. They match, so return `True`.

- **Example 2**: `x = -121`
  - `x` is negative, so we immediately return `False`.

- **Example 3**: `x = 10`
  - `x` ends with `0` but is not `0`, so return `False`.

### Complexity Analysis

- **Time Complexity**: \(O(\log_{10}(n))\), since we are processing approximately half of the digits in `x`.
- **Space Complexity**: \(O(1)\), as we are only using a fixed amount of extra space.

This method is efficient and avoids string conversion, meeting the requirements of the follow-up.
