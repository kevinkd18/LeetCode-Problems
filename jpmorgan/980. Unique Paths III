class Solution:
    def uniquePathsIII(self, grid: list[list[int]]) -> int:
        m, n = len(grid), len(grid[0])
        start_x = start_y = end_x = end_y = -1
        empty_count = 0

        # Find start, end, and count empty squares
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1:
                    start_x, start_y = i, j
                elif grid[i][j] == 2:
                    end_x, end_y = i, j
                if grid[i][j] != -1:
                    empty_count += 1

        # Helper function for backtracking
        def dfs(x: int, y: int, squares_walked: int) -> int:
            # If we reach the end square
            if (x, y) == (end_x, end_y):
                return squares_walked == empty_count

            # Mark as visited
            temp, grid[x][y] = grid[x][y], -1
            paths = 0

            # Explore 4 possible directions
            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
                nx, ny = x + dx, y + dy
                if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] != -1:
                    paths += dfs(nx, ny, squares_walked + 1)

            # Backtrack: unmark this cell as visited
            grid[x][y] = temp
            return paths

        # Start the DFS from the starting cell
        return dfs(start_x, start_y, 1)
